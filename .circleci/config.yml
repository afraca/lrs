version: 2.0

jobs:
  build:
    docker:
      - image: circleci/node:latest
    working_directory: ~/lrs
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Login to Docker registry
          command: |
            docker login $DOCKER_REGISTRY -u $DOCKER_USER -p $DOCKER_PASSWORD

      - run:
          name: Build Docker image
          command: docker build . -t lrs:$CIRCLE_BRANCH$CIRCLE_TAG

      - run:
          name: Publish Docker image
          command: |
            echo $CIRCLE_BRANCH
            echo $CIRCLE_TAG
            docker tag lrs:$CIRCLE_BRANCH $DOCKER_REGISTRY/lrs:$CIRCLE_BRANCH$CIRCLE_TAG
            docker push $DOCKER_REGISTRY/lrs:$CIRCLE_BRANCH$CIRCLE_TAG

  deploy:
    docker:
      - image: circleci/node:latest
    working_directory: ~/lrs
    steps:
      - setup_remote_docker
      - run:
          name: Login to Docker registry
          command: |
            docker login $DOCKER_REGISTRY -u $DOCKER_USER -p $DOCKER_PASSWORD

      - run:
          name: Dump Docker Credentials to file
          command: |
            echo $TLSCACERT | base64 --decode --ignore-garbage > ${HOME}/ca.pem
            echo $TLSKEY | base64 --decode --ignore-garbage > ${HOME}/key.pem
            echo $TLSCERT | base64 --decode --ignore-garbage > ${HOME}/cert.pem

      - run: 
          name: Set CONTAINER_NAME variable
          command: |
            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              echo 'export CONTAINER_NAME="lrs-staging"' >> $BASH_ENV
              echo 'export VIRTUAL_HOST="reports-staging.$HOSTNAME"' >> $BASH_ENV
            else
              echo 'export CONTAINER_NAME="lrs-$CIRCLE_BRANCH"' >> $BASH_ENV
              echo 'export VIRTUAL_HOST="reports-$CIRCLE_BRANCH.$DEV_PROXY.$HOSTNAME"' >> $BASH_ENV
            fi

      - run:
          name: Stop previous Docker container
          command: |
            docker --tlsverify --tlscacert=${HOME}/ca.pem --tlscert=${HOME}/cert.pem --tlskey=${HOME}/key.pem -H $STAGING_DOCKER_HOST inspect $CONTAINER_NAME &> /dev/null && \
              docker --tlsverify --tlscacert=${HOME}/ca.pem --tlscert=${HOME}/cert.pem --tlskey=${HOME}/key.pem -H $STAGING_DOCKER_HOST stop $CONTAINER_NAME && \
              docker --tlsverify --tlscacert=${HOME}/ca.pem --tlscert=${HOME}/cert.pem --tlskey=${HOME}/key.pem -H $STAGING_DOCKER_HOST rm $CONTAINER_NAME || \
              true

      - run:
          name: Run Docker container
          command: |
            docker \
              --tlsverify --tlscacert=${HOME}/ca.pem --tlscert=${HOME}/cert.pem --tlskey=${HOME}/key.pem \
              -H $STAGING_DOCKER_HOST \
              run \
              -d \
              --name $CONTAINER_NAME \
              --env VIRTUAL_HOST="$VIRTUAL_HOST" \
              --env LETSENCRYPT_HOST="$VIRTUAL_HOST" \
              --env DBHOST="$STAGING_DBHOST" \
              --env LOG_LEVEL="verbose" \
              --env TOKENS_URI="$STAGING_TOKENS_URI" \
              --env TOKENS_API_KEY="$STAGING_TOKENS_API_KEY" \
              --env APP_API_KEY="$STAGING_APP_API_KEY" \
              --env PERMISSIONS_ENDPOINT_HOSTS="staging.easygenerator.com" \
              --restart on-failure \
              $DOCKER_REGISTRY/lrs:$CIRCLE_BRANCH


  deploy-production:
    docker:
      - image: circleci/node:latest
    steps:
      - setup_remote_docker
      - run:
          name: Login to Docker registry
          command: |
            docker login $DOCKER_REGISTRY -u $DOCKER_USER -p $DOCKER_PASSWORD

      - run:
          name: Dump Docker Credentials to file
          command: |
            echo $ORG_TLS_CA_PRODUCTION | base64 --decode --ignore-garbage > ${HOME}/ca.pem
            echo $ORG_TLS_KEY_PRODUCTION | base64 --decode --ignore-garbage > ${HOME}/key.pem
            echo $ORG_TLS_CERT_PRODUCTION | base64 --decode --ignore-garbage > ${HOME}/cert.pem

      - run:
          name: Stop previous Docker container
          command: |
            docker --tlsverify --tlscacert=${HOME}/ca.pem --tlscert=${HOME}/cert.pem --tlskey=${HOME}/key.pem -H $ORG_DOCKER_HOST_PRODUCTION inspect lrs &> /dev/null && \
              docker --tlsverify --tlscacert=${HOME}/ca.pem --tlscert=${HOME}/cert.pem --tlskey=${HOME}/key.pem -H $ORG_DOCKER_HOST_PRODUCTION stop lrs && \
              docker --tlsverify --tlscacert=${HOME}/ca.pem --tlscert=${HOME}/cert.pem --tlskey=${HOME}/key.pem -H $ORG_DOCKER_HOST_PRODUCTION rm lrs || \
              true

      - run:
          name: Run Docker container
          command: |
            docker \
              --tlsverify --tlscacert=${HOME}/ca.pem --tlscert=${HOME}/cert.pem --tlskey=${HOME}/key.pem \
              -H $ORG_DOCKER_HOST_PRODUCTION \
              run \
              -d \
              --name lrs \
              --env VIRTUAL_HOST="$PRODUCTION_VIRTUAL_HOST" \
              --env DBHOST="$PRODUCTION_DBHOST" \
              --env LOG_LEVEL="verbose" \
              --env TOKENS_URI="$PRODUCTION_TOKENS_URI" \
              --env TOKENS_API_KEY="$PRODUCTION_TOKENS_API_KEY" \
              --env APP_API_KEY="$PRODUCTION_APP_API_KEY" \
              --env PERMISSIONS_ENDPOINT_HOSTS="PERMISSIONS_ENDPOINT_HOSTS" \
              --restart on-failure \
              $DOCKER_REGISTRY/lrs:$$CIRCLE_BRANCH$CIRCLE_TAG


  cleanup:
    docker:
      - image: circleci/node:latest
    working_directory: ~/lrs
    steps:
      - run:
          name: Dump Docker Credentials to file
          command: |
            echo $TLSCACERT | base64 --decode --ignore-garbage > ${HOME}/ca.pem
            echo $TLSKEY | base64 --decode --ignore-garbage > ${HOME}/key.pem
            echo $TLSCERT | base64 --decode --ignore-garbage > ${HOME}/cert.pem

      - run: 
          name: Set CONTAINER_NAME variable
          command: |
            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              echo 'export CONTAINER_NAME="lrs-staging"' >> $BASH_ENV
            else
              echo 'export CONTAINER_NAME="lrs-$CIRCLE_BRANCH"' >> $BASH_ENV
            fi

      - run:
          name: Stop previous Docker container
          command: |
            docker --tlsverify --tlscacert=${HOME}/ca.pem --tlscert=${HOME}/cert.pem --tlskey=${HOME}/key.pem -H $STAGING_DOCKER_HOST inspect $CONTAINER_NAME &> /dev/null && \
              docker --tlsverify --tlscacert=${HOME}/ca.pem --tlscert=${HOME}/cert.pem --tlskey=${HOME}/key.pem -H $STAGING_DOCKER_HOST stop $CONTAINER_NAME && \
              docker --tlsverify --tlscacert=${HOME}/ca.pem --tlscert=${HOME}/cert.pem --tlskey=${HOME}/key.pem -H $STAGING_DOCKER_HOST rm $CONTAINER_NAME || \
              true


workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build:
          filters:
            tags:
                only: /.*/
      - deploy:
          requires:
            - build
          filters:
            tags:
              ignore: /^v.*/
      - hold:
          type: approval
          requires:
           - deploy
          filters:
            branches:
              ignore: master
            tags:
              ignore: /^v.*/
      - cleanup:
          requires:
            - hold
      - approve-deploy-production:
          type: approval
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - deploy-production:
          context: Environment setup
          requires:
            - approve-deploy-production
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/